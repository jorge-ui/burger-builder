{"version":3,"sources":["App.module.scss","Components/Layout/Navbar/Navbar.module.scss","Components/Layout/Navbar/Navbar.js","App.js","serviceWorker.js","index.js","Components/Loading/Loading.js"],"names":["module","exports","Navbar","props","className","styles","onClick","close","document","querySelector","click","icon","library","add","faHamburger","faPlus","faMinus","faSpinner","faTimes","faChevronRight","BurgerBuilder","lazy","CheckoutModal","Landing","Delayed","App","useState","showBuilder","setShowBuilder","show","order","showModal","setShowModal","fallback","Loading","mounted","mountAfter","unmountAfter","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","useEffect","style","opacity","id","position","height","width","left","top","display","justifyContent","alignItems","backgroundColor","transition","spin","size","color","textShadow"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,aAAe,0BAA0B,IAAM,mB,mBCAjED,EAAOC,QAAU,CAAC,OAAS,yB,4LCeZC,EAZA,SAACC,GAAD,OACZ,yBAAKC,UAAS,+CAA0CC,IAAOH,SAC5D,wBAAIE,UAAU,eAAeE,QAAS,WACnC,IAAIC,EAAQC,SAASC,cAAc,iBACnCF,GAASA,EAAMG,UAEf,kBAAC,IAAD,CAAMC,KAAK,cAJd,mB,qBCSNC,IAAQC,IACLC,IACAC,IACAC,IACAC,IACAC,IACAC,KAGH,IAAMC,EAAgBC,gBAAK,kBAAM,gCAC3BC,EAAgBD,gBAAK,kBAAM,uDAC3BE,EAAUF,gBAAK,kBAAM,gCACrBG,EAAUH,gBAAK,kBAAM,qCAwCZI,EAtCH,WAAO,IAAD,EACuBC,oBAAS,GADhC,mBACRC,EADQ,KACKC,EADL,OAEmBF,mBAAS,CAACG,MAAM,EAAOC,MAAO,KAFjD,mBAERC,EAFQ,KAEGC,EAFH,KAIf,OACG,yBAAK5B,UAAWC,IAAOoB,KAEpB,kBAAC,EAAD,MAGA,kBAAC,WAAD,CAAUQ,SAAU,kBAACC,EAAA,EAAD,OACjB,kBAACX,EAAD,CAASK,eAAgBA,EAAgBD,YAAaA,KAIzD,kBAAC,WAAD,CAAUM,SAAU,kBAACC,EAAA,EAAD,OACjB,kBAACV,EAAD,CAASW,QAASR,EAAaS,WAAY,EAAGC,aAAc,KACzD,kBAACjB,EAAD,CACGO,YAAaA,EACbC,eAAgBA,EAChBI,aAAcA,MAMvB,kBAAC,WAAD,CAAUC,SAAU,kBAACC,EAAA,EAAD,OACjB,kBAACV,EAAD,CAASW,QAASJ,EAAUF,KAAMO,WAAY,EAAGC,aAAc,KAC5D,kBAACf,EAAD,CACGU,aAAcA,EACdF,MAAOC,EAAUD,YC/CfQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,+BEnInB,2BA+BejB,IA5BC,WAKb,OAJAkB,qBAAU,WACP5C,SAASC,cAAc,YAAY4C,MAAMC,QAAU,IACnD,IAGA,yBAAKC,GAAG,UAAUF,MAAO,CACzBG,SAAU,WACVC,OAAQ,OACRC,MAAO,OACPC,KAAM,IACNC,IAAK,IACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,gBAAiB,YACjBV,QAAS,IACTW,WAAY,iBAEZ,kBAAC,IAAD,CAAiBtD,KAAK,UAAUuD,MAAI,EAACC,KAAK,KAAKd,MAAO,CACnDe,MAAO,QACPC,WAAY,uB","file":"static/js/main.0df159b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildWrapper\":\"App_BuildWrapper__2IVzT\",\"App\":\"App_App__3vRYR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__28SEg\"};","import React from 'react'\r\nimport styles from './Navbar.module.scss'\r\nimport {FontAwesomeIcon as Icon} from '@fortawesome/react-fontawesome'\r\n\r\nconst Navbar = (props) => (\r\n   <nav className={`navbar navbar-expand-lg navbar-light ${styles.Navbar}`}>\r\n      <li className=\"navbar-brand\" onClick={() => {\r\n         let close = document.querySelector('#closeBuilder')\r\n         close && close.click()\r\n      }}>\r\n         <Icon icon=\"hamburger\" />\r\n         BurgerBuilder\r\n      </li>\r\n   </nav>\r\n)\r\n\r\nexport default Navbar","import React, {useState, lazy, Suspense} from 'react'\nimport styles from './App.module.scss'\n// Components\nimport Navbar from './Components/Layout/Navbar/Navbar'\nimport Loading from './Components/Loading/Loading'\n// FontAwesome\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { \n   faHamburger,\n   faPlus,\n   faMinus,\n   faSpinner,\n   faTimes,\n   faChevronRight\n} from '@fortawesome/free-solid-svg-icons'\nlibrary.add(\n   faHamburger,\n   faPlus,\n   faMinus,\n   faSpinner,\n   faTimes,\n   faChevronRight\n   )\n// Lazy Components\nconst BurgerBuilder = lazy(() => import('./Components/BurgerBuilder/BurgerBuilder'))\nconst CheckoutModal = lazy(() => import('./Components/CheckoutModal/CheckoutModal'))\nconst Landing = lazy(() => import('./Components/Landing/Landing'))\nconst Delayed = lazy(() => import('react-delayed'))\n   \nconst App = () => {\n   const [showBuilder, setShowBuilder] = useState(false)\n   const [showModal, setShowModal] = useState({show: false, order: {}})\n\n   return (\n      <div className={styles.App}>\n         {/* Navbar */}\n         <Navbar />\n\n         {/* Landing */}\n         <Suspense fallback={<Loading/>}>\n            <Landing setShowBuilder={setShowBuilder} showBuilder={showBuilder} />\n         </Suspense>\n\n         {/* BurgerBuilder */}\n         <Suspense fallback={<Loading/>}>\n            <Delayed mounted={showBuilder} mountAfter={0} unmountAfter={700}>\n               <BurgerBuilder\n                  showBuilder={showBuilder}\n                  setShowBuilder={setShowBuilder}\n                  setShowModal={setShowModal}\n               />\n            </Delayed>\n         </Suspense>\n\n         {/* CheckoutModal */}\n         <Suspense fallback={<Loading/>}>\n            <Delayed mounted={showModal.show} mountAfter={0} unmountAfter={220}>\n               <CheckoutModal\n                  setShowModal={setShowModal}\n                  order={showModal.order}\n               />\n            </Delayed>\n         </Suspense>\n      </div>\n   )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useEffect} from 'react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nconst Loading = () => {\r\n   useEffect(() => {\r\n      document.querySelector('#spinner').style.opacity = 1\r\n   }, [])\r\n\r\n   return (\r\n      <div id=\"spinner\" style={{\r\n      position: 'absolute',\r\n      height: '100%',\r\n      width: '100%',\r\n      left: '0',\r\n      top: '0',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      backgroundColor: '#0000003d',\r\n      opacity: '0',\r\n      transition: 'opacity 1.6s'\r\n   }}>\r\n      <FontAwesomeIcon icon=\"spinner\" spin size=\"3x\" style={{\r\n         color: 'white',\r\n         textShadow: '0 0 4px white'\r\n      }} />\r\n   </div>\r\n   )\r\n   \r\n}\r\n\r\nexport default Loading"],"sourceRoot":""}